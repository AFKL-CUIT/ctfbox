Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## ctfbox \r\n**A box for CTF challenges with some sugar functions, Just enjoy it**\r\n\r\nCurrent version: **1.2.0**\r\n\r\nPlease use python **3.6+**\r\n\r\n## Install\r\nAll you need to do is\r\n```sh\r\npip install ctfbox\r\n```\r\n\r\n## Usage\r\n\r\n### Common\r\n```python\r\nfrom ctfbox import * # Will not import the pwn part, please check the Pwn Usage section below\r\n# enjoy it\r\n```\r\n\r\n### Pwn Usage\r\n```python\r\n# Don't support windows\r\nfrom pwn import * # import pwntools\r\n# set pwntools config...\r\n# context.os = 'linux'\r\n# context.log_level = 'debug'\r\n# context.arch = 'amd64'\r\nfrom ctfbox.pwntools.config import Config # import confit for pwn part of ctfbox\r\n# set necessary config \r\n\"\"\"\r\nAttributes:\r\n- local(bool) : connect to local binary / remote address, default: True\r\n- bin(str)    : the binary path, e.g. './pwn'\r\n- address(str): the remote address, e.g. '127.0.0.1:2333'\r\n- pie(bool)   : whether the memory address is randomized, default: False\r\n\"\"\"\r\nConfig.local = True\r\nConfig.address = \"127.0.0.1:2333\"\r\nConfig.bin = \"./bin\"\r\n# import pwn part\r\nfrom ctfbox.pwn import *\r\n```\r\nnow you can use the below attributes/functions\r\n```\r\nslog // empty dictionary, you can set the leaked address and corresponding name. e.g. slog['libc'] = libc_addr\r\nelf  // pwntools.ELF(binaray)\r\ncn   // a connect to local binary or remote address\r\nre   // lambda of cn.recv(m, t)\r\nrecv // lambda of cn.recv()\r\nru   // lambda of cn.recvuntil(x)\r\nrl   // lambda of cn.recvline()\r\nsd   // lambda of cn.send(x)\r\nsl   // lambda of cn.sendline(x)\r\nia   // lambda of cn.interactive()\r\nsla  // lambda of cn.sendlineafter(a, b)\r\nsa   // lambda of cn.sendafter(a, b)\r\nft   // ft(arg, f=pwnlib.util.cyclic.de_bruijn(), l=None) lambda of flat(*arg, filler=f, length=l)\r\ngdba // gdba(bps) debug, argument bps save the breakpoint address, breakpoint can also be automatically set when pie is turned on, need pmap command\r\nslog_show // print all set slogs, in hexadecimal format\r\n```\r\n\r\n\r\n## Functions\r\n\r\n### utils\r\nSome functions with names similar to PHP, close to intuition\r\n- url_encode(s: str, encoding: str = 'utf-8') -> str\r\n- url_decode(s: str, encoding: str = 'utf-8') -> str\r\n- base64_decode(s: str, encoding='utf-8') -> str\r\n- base64_encode(s: str, encoding='utf-8') -> str\r\n- json_encode(obj) -> object\r\n- json_decode(data) -> str\r\n- jwt_decode(token: str) -> bytes\r\n- jwt_encode(header: dict, payload: dict, key=None, algorithm=None) -> str\r\n- bin2hex(s: str) -> str\r\n- hex2bin(s: str) -> str\r\n- sha1(s: str, encoding='utf-8') -> str\r\n- sha256(s: str, encoding='utf-8') -> str\r\n- md5(s: str, encoding='utf-8') -> str\r\n- random_int(minN: int = 0, maxN: int = 1024) -> int\r\n- random_string(n: int = 32, alphabet: str = \"\") -> str\r\n\r\nSome functions that may be used in web\r\n- get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = \"flask.app\", appName: str = \"Flask\") -> str\r\n\r\nSome functions that may be used in reverse engineering\r\n* print data in hex format: `printHex()`\r\n* pack number into bytes: `p16()`, `p32()`, `p64()`\r\n* unpack number from bytes: `u16()`, `u32()`, `u64()`\r\n\r\nplease refer to source code for functions signatures and usage\r\n\r\n\r\n\r\nSome functions that may be used in misc\r\n\r\n***TODO***\r\n\r\nSome other functions\r\n- od_parse(data: str) -> Dict[str, Union[str, list]]\r\n\r\n\r\n### core\r\nSome functions Write by ourselves\r\n- Threader(number: int, timeout: int = None, retry: int = 2)\r\n   ```\r\n    A simple decorator function that can decorate the function to make it multi-threaded.\r\n   ```\r\n   Here is a example.\r\n   ```Python\r\n   from ctfbox import Threader, random_string, random_int\r\n   from time import sleep\r\n\r\n   @Threader(10)\r\n   def exp(i: int):\r\n       sleep(random_int(1, 5))\r\n       return \"%d : %s\" % (i, random_string())\r\n    \r\n    tasks = [exp(i) for i in range(100)] # 100 tasks\r\n    for task in tasks: \r\n        # task.result return when a task completed\r\n        # task is a concurrent.futures.Future with some sugar attributes\r\n        print('result: %s running: %s done: %s exception: %s' % (task.result, task.running, task.done, task.exception))\r\n   ```\r\n- provide(host: str = \"0.0.0.0\", port: int = 2005, isasync: bool = False, files: List[Tuple[Union[filepath, content], routePath, contentType]] = {})\r\n   ```\r\n   A simple and customizable http server.\r\n   ```\r\n   Here are some examples.\r\n   ```python\r\n   # provide a exist file named index.html\r\n   provide(files=[('index.html',)])\r\n   # Here is a trick if you provide only one file\r\n   provide(files=['index.html'])\r\n   # route /index.html provide content Hello world\\n\r\n   provide(files=[(b\"Hello world\\\\n\", \"/index.html\")])\r\n   # provide some files\r\n   provide(files=[(\"test.txt\", ), (\"index.html\", )])\r\n   ```\r\n- hashAuth(startIndex: int = 0, endIndex: int = 5, answer: str = \"\", maxRange: int = 1000000, threadNum: int = 25, hashType: HashType = HashType.MD5) -> str\r\n   ```\r\n   A function used to blast the first few bits of the hash, often used to crack the ctf verification code\r\n   ```\r\n   Here are some examples.\r\n   ```python\r\n   ### HashType optional value: HashType.MD5, HashType.SHA1, HashType.SHA256, HashType.SHA512\r\n   ### Crack the first five number MD5 type ctf verification codes\r\n   print(hashAuth(answer=\"02fcf\"))\r\n   ### Crack the first five number SHA1 type ctf verification codes\r\n   print(hashAuth(answer=\"d13ce\", hashType=HashType.SHA1))\r\n   #### Crack more quickly!!\r\n   print(hashAuth(answer=\"c907773\", endIndex=7, threadNum=50))\r\n   ### Make the range bigger!!\r\n   print(hashAuth(answer=\"59e711d\", endIndex=7, maxRange=2000000))\r\n   ```\r\n- httpraw(raw: Union[bytes, str], **kwargs -> requests.Response):\r\n   ```\r\n   Send raw request by python-requests\r\n   \r\n   Allow kwargs:\r\n   - proxies(dict) : requests proxies\r\n   - timeout(float): requests timeout\r\n   - verify(bool)  : requests verify\r\n   - real_host(str): use real host instead of Host if set\r\n   - ssl(bool)     : whether https\r\n   ```\r\n\r\n## Techniques\r\n- [pdm](https://github.com/frostming/pdm)\r\n- [version-helper](https://github.com/WAY29/version-helper/)\r\n\r\n## Depends\r\n- requests\r\n- PyJWT\r\n\r\n## Contributors\r\nSyclover\r\n   - [Longlone](https://github.com/way29)\r\n   - [F4ded](https://github.com/F4ded)\r\n   - [lingze](https://github.com/wlingze)\r\n   - [pjx](https://github.com/pjx206)\r\n\r\nOther\r\n   - [Morouu](http://github.com/Morouu)\r\n\r\n## Logs\r\n\r\n### 1.2.1(TODO)\r\nhttpraw:\r\n   - fix a bug that httpraw may not be able to send post request correctly\r\n   - fix a bug that could not solve port\r\n   - fix a bug that real_host could not use\r\n   - fix a bug that may cause encoding error\r\n### 1.2.0\r\n- add dev dependencies: icecream\r\n- add some functions:\r\n    - od_parse\r\n    - get_flask_pin\r\n    - httpraw\r\n    - p16 p32 p64 and uXX functions\r\n    - Base32 and Base64 table getter\r\n### v1.1.1\r\n- move project to new directory\r\n- update Readme.md, added missing functions\r\n### v1.1.0\r\n- add pwn part, please see Pwn Usage\r\n- add some functions that may be used in reverse\r\n- update hashAuth functions\r\n  - error if startIndex is less than endIndex\r\n  - if startIndex is zero and length of hash(endIndex - startIndex) is not equal to length of answer, endIndex will be set to length of answer\r\n- update Readme.md, add usage and contributors, Supplementary dependency: PyJWT\r\n### v1.0.2\r\n- update Readme.md\r\n### V1.0.1\r\n- update Readme.md\r\n### V1.0.0\r\n- first commit
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 581f5581d3ac7e96a27c1b5199d014738c20c12a)
+++ b/README.md	(date 1611504470551)
@@ -85,6 +85,28 @@
 Some functions that may be used in web
 - get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = "flask.app", appName: str = "Flask") -> str
 
+- flask_session_helper(*Note: There is no flask dependency in ctfbox itself, the following two functions need to install the dependency by yourself*)
+  - flask_session_encode(secret_key: str, payload: dict)
+  - flask_session_decode(session_data: str, secret_key: str)
+  ```python
+  # Here is example
+  if __name__ == '__main__':
+  sc = '123'
+  pl = {
+  'user': 'admin',
+  'info': 'test'
+  }
+  ss = 'eyJpbmZvIjoidGVzdCIsInVzZXIiOiJhZG1pbiJ9.YA2WEA.phDDlkaEQOaXthwvpENxAeiHfiE'
+  print(flask_session_encode(sc, pl))
+  print(flask_session_decode(ss, '123'))
+  print(flask_session_decode(ss, '12345'))
+  
+  # Output
+  eyJpbmZvIjoidGVzdCIsInVzZXIiOiJhZG1pbiJ9.YA2XHw.PSPjYFyj3hxsTNx-d2vjncAMJW4
+  {'info': 'test', 'user': 'admin'}
+  ![Decoding Error] : Signature b'phDDlkaEQOaXthwvpENxAeiHfiE' does not match
+  ```
+
 Some functions that may be used in reverse engineering
 * print data in hex format: `printHex()`
 * pack number into bytes: `p16()`, `p32()`, `p64()`
Index: ctfbox/utils/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\nfrom base64 import (b32encode, b64decode, b64encode, urlsafe_b64decode,\r\n                    urlsafe_b64encode)\r\nfrom binascii import hexlify, unhexlify\r\nfrom hashlib import md5 as _md5\r\nfrom hashlib import sha1 as _sha1\r\nfrom hashlib import sha256 as _sha256\r\nfrom itertools import chain\r\nfrom json import dumps, loads\r\nfrom random import choice, randint\r\nfrom string import ascii_lowercase, digits\r\nfrom struct import pack, unpack\r\nfrom typing import Dict, Union\r\nfrom urllib.parse import quote_plus, unquote_plus\r\n\r\nimport jwt\r\nimport requests\r\n\r\nDEFAULT_ALPHABET = list(ascii_lowercase + digits)\r\n\r\n\r\ndef url_encode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return quote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef url_decode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return unquote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_decode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64decode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_encode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64encode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef bin2hex(s: str) -> str:\r\n    try:\r\n        return hexlify(s.encode()).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef hex2bin(s: str) -> str:\r\n    try:\r\n        return unhexlify(s).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha1(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha1(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha256(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha256(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef md5(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _md5(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef random_int(minN: int = 0, maxN: int = 1024) -> int:\r\n    try:\r\n        return randint(minN, maxN)\r\n    except Exception:\r\n        return 0\r\n\r\n\r\ndef random_string(n: int = 32, alphabet: str = DEFAULT_ALPHABET) -> str:\r\n    try:\r\n        return ''.join([choice(alphabet) for _ in range(n)])\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef json_encode(obj) -> object:\r\n    try:\r\n        return dumps(obj)\r\n    except Exception:\r\n        return object()\r\n\r\n\r\ndef json_decode(data) -> str:\r\n    try:\r\n        return loads(data)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef jwt_encode(header: dict, payload: dict, key=None, algorithm=None) -> str:\r\n    if key is None and algorithm is None:\r\n        # dict to json\r\n        hearder_json = dumps(header, sort_keys=True, separators=(',', ':'))\r\n        payload_json = dumps(payload, sort_keys=True, separators=(',', ':'))\r\n        # json to base64\r\n        header_b64 = urlsafe_b64encode(\r\n            hearder_json.encode()).replace(b'=', b'')\r\n        payload_b64 = urlsafe_b64encode(\r\n            payload_json.encode()).replace(b'=', b'')\r\n\r\n        return (header_b64 + b'.' + payload_b64).decode()\r\n    else:\r\n        return jwt.encode(payload=payload, key=key, algorithm=algorithm, headers=header)\r\n\r\n\r\ndef jwt_decode(token: str) -> bytes:\r\n    data = [b''] * 3\r\n    try:\r\n        for i, each in enumerate(token.split('.')):\r\n            padding = 4 - len(each) % 4\r\n            if padding:\r\n                each += ('=' * padding)\r\n            data[i] = urlsafe_b64decode(each.encode())\r\n    except Exception:\r\n        pass\r\n\r\n    return b'-'.join(data)\r\n\r\n# ? web\r\n\r\n\r\ndef get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = \"flask.app\", appName: str = \"Flask\") -> str:\r\n    rv, num = None, None\r\n    probably_public_bits = [\r\n        username,\r\n        modName,\r\n        # getattr(app, '__name__', getattr(app.__class__, '__name__'))\r\n        appName,\r\n        # getattr(mod, '__file__', None),\r\n        absRootPath,\r\n    ]\r\n\r\n    private_bits = [\r\n        # str(uuid.getnode()),  /sys/class/net/ens33/address\r\n        str(int(macAddress.strip().replace(\":\", \"\"), 16)),\r\n        machineId,  # get_machine_id(), /etc/machine-id\r\n    ]\r\n\r\n    h = _md5()\r\n    for bit in chain(probably_public_bits, private_bits):\r\n        if not bit:\r\n            continue\r\n        if isinstance(bit, str):\r\n            bit = bit.encode('utf-8')\r\n        h.update(bit)\r\n    h.update(b'cookiesalt')\r\n\r\n    h.update(b'pinsalt')\r\n    num = ('%09d' % int(h.hexdigest(), 16))[:9]\r\n\r\n    for group_size in 5, 4, 3:\r\n        if len(num) % group_size == 0:\r\n            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')\r\n                          for x in range(0, len(num), group_size))\r\n            break\r\n    else:\r\n        rv = num\r\n    return rv\r\n\r\n\r\n# ? Reverse\r\n\r\ndef printHex(data: Union[bytes, str], up: bool = True, sep: str = ' '):\r\n    if isinstance(data, str):\r\n        data = data.encode()\r\n    bs = list(data)\r\n    for i in range(len(bs)):\r\n        print(('%02X' if up else '%02x') % bs[i], end=sep)\r\n        if (i+1) % 16 == 0:\r\n            print()\r\n\r\n\r\ndef _get_pack_fmtstr(sign, endianness, N):\r\n    byte_order = {\r\n        'little': '<',\r\n        'big': '>'\r\n    }\r\n    number_type = {\r\n        'unsigned': {\r\n            16: 'H',\r\n            32: 'I',\r\n            64: 'Q',\r\n        },\r\n        'signed': {\r\n            16: 'h',\r\n            32: 'i',\r\n            64: 'q',\r\n        }\r\n    }\r\n    return byte_order[endianness] + number_type[sign][N]\r\n\r\n\r\ndef _pN(N: int, number: int, sign: str, endianness: str) -> bytes:\r\n    fmt = _get_pack_fmtstr(sign, endianness, N)\r\n    # use 0xff...ff and N to calculate a mask\r\n    return pack(fmt, number & (0xffffffffffffffff >> (64 - N)))\r\n\r\n\r\ndef p16(number: int, sign: str = 'unsigned', endianness: str = 'little') -> bytes:\r\n    \"\"\"Pack a 16-bit number\r\n\r\n    Args:\r\n        number (int): Number to convert\r\n        sign (str, optional): Signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): Endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n\r\n    Returns:\r\n        bytes: The packed bytes\r\n    \"\"\"\r\n    return _pN(16, number, sign, endianness)\r\n\r\n\r\ndef p32(number: int, sign: str = 'unsigned', endianness: str = 'little') -> bytes:\r\n    \"\"\"Pack a 32-bit number\r\n\r\n    Args:\r\n        number (int): Number to convert\r\n        sign (str, optional): Signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): Endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n\r\n    Returns:\r\n        bytes: The packed bytes\r\n    \"\"\"\r\n    return _pN(32, number, sign, endianness)\r\n\r\n\r\ndef p64(number: int, sign: str = 'unsigned', endianness: str = 'little') -> bytes:\r\n    \"\"\"Pack a 64-bit number\r\n\r\n    Args:\r\n        number (int): Number to convert\r\n        sign (str, optional): Signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): Endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n\r\n    Returns:\r\n        bytes: The packed bytes\r\n    \"\"\"\r\n    return _pN(64, number, sign, endianness)\r\n\r\n\r\ndef _uN(N: int, data: bytes, sign: str, endianness: str, ignore_size: bool) -> int:\r\n    fmt = _get_pack_fmtstr(sign, endianness, N)\r\n\r\n    if ignore_size:\r\n        size = N // 8\r\n        data_len = len(data)\r\n        if data_len < size:\r\n            data += b'\\x00' * (size - data_len)\r\n        elif data_len > size:\r\n            data = data[:size]\r\n\r\n    return unpack(fmt, data)[0]\r\n\r\n\r\ndef u16(data: bytes, sign: str = 'unsigned', endianness: str = 'little', ignore_size=True) -> int:\r\n    \"\"\"Unpacks an 16-bit integer\r\n\r\n    Args:\r\n        data (bytes): bytes data to convert\r\n        sign (str, optional): signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n        ignore_size (bool, optional): automatically pad data or truncate it to match the size . Defaults to True.\r\n\r\n    Returns:\r\n        int: The unpacked number\r\n    \"\"\"\r\n    return _uN(16, data, sign, endianness, ignore_size)\r\n\r\n\r\ndef u32(data: bytes, sign: str = 'unsigned', endianness: str = 'little', ignore_size=True) -> int:\r\n    \"\"\"Unpacks an 32-bit integer\r\n\r\n    Args:\r\n        data (bytes): bytes data to convert\r\n        sign (str, optional): signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n        ignore_size (bool, optional): automatically pad data or truncate it to match the size . Defaults to True.\r\n\r\n    Returns:\r\n        int: The unpacked number\r\n    \"\"\"\r\n    return _uN(32, data, sign, endianness, ignore_size)\r\n\r\n\r\ndef u64(data: bytes, sign: str = 'unsigned', endianness: str = 'little', ignore_size=True) -> int:\r\n    \"\"\"Unpacks an 64-bit integer\r\n\r\n    Args:\r\n        data (bytes): bytes data to convert\r\n        sign (str, optional): signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n        ignore_size (bool, optional): automatically pad data or truncate it to match the size . Defaults to True.\r\n\r\n    Returns:\r\n        int: The unpacked number\r\n    \"\"\"\r\n    return _uN(64, data, sign, endianness, ignore_size)\r\n\r\n\r\ndef std_b32table() -> bytes:\r\n    \"\"\"Get a standard Base32 table\r\n\r\n    Returns:\r\n        bytes: Base32 table in bytes format, use std_b64table().decode() to get a 'str' one\r\n    \"\"\"\r\n    return b32encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(5), list(range(32)))))))))\r\n\r\n\r\ndef std_b64table() -> bytes:\r\n    \"\"\"Get a standard Base64 table\r\n\r\n    Returns:\r\n        bytes: Base64 table in bytes format, use std_b64table().decode() to get a 'str' one\r\n    \"\"\"\r\n    return b64encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(6), list(range(64)))))))))\r\n\r\n# ? other\r\n\r\n\r\ndef od_parse(data: str) -> Dict[str, Union[str, list]]:\r\n    \"\"\"Parse od command output without argument, return a dict with the following keys: hex, ascii, list, text\r\n    Returns:\r\n        dict: with key hex, ascii, list, text\r\n    \"\"\"\r\n    text, asc_data, hex_data, list_data = \"\", \"\", \"\", []\r\n    for line in data.split(\"\\n\"):\r\n        for d in line.split(\" \")[1:]:\r\n            h = hex(int(d, 8))[2:].zfill(4)\r\n            a, b = int(h[2:], 16), int(h[:2], 16)\r\n            text += chr(a)+chr(b)\r\n            hex_data += \"0x%x 0x%x \" % (a, b)\r\n            asc_data += \"%s %s \" % (a, b)\r\n            list_data += [a, b]\r\n    return {\"hex\": hex_data.strip(), \"ascii\": asc_data.strip(), \"list\": list_data, \"text\": text}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ctfbox/utils/utils.py b/ctfbox/utils/utils.py
--- a/ctfbox/utils/utils.py	(revision 581f5581d3ac7e96a27c1b5199d014738c20c12a)
+++ b/ctfbox/utils/utils.py	(date 1611504093623)
@@ -139,10 +139,12 @@
 
     return b'-'.join(data)
 
+
 # ? web
 
 
-def get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = "flask.app", appName: str = "Flask") -> str:
+def get_flask_pin(username: str, absRootPath: str, macAddress: str, machineId: str, modName: str = "flask.app",
+                  appName: str = "Flask") -> str:
     rv, num = None, None
     probably_public_bits = [
         username,
@@ -181,6 +183,70 @@
     return rv
 
 
+# flask_session_helper
+
+def check_import():
+    try:
+        from flask.sessions import SecureCookieSessionInterface
+    except ImportError:
+        return "Please install moudle Flask. e.g. python3 -m pip install flask"
+
+
+class App:
+    def __init__(self, secret_key: str):
+        self.secret_key = secret_key
+
+
+def flask_session_encode(secret_key: str, payload: dict):
+    """encode flask session
+
+    Args:
+        secret_key: secret_key
+        payload: The data you want to encode
+
+    Returns:
+        str: session data
+
+    """
+    try:
+        from flask.sessions import SecureCookieSessionInterface
+        try:
+            app = App(secret_key)
+            scsi = SecureCookieSessionInterface()
+            s = scsi.get_signing_serializer(app)
+
+            return s.dumps(payload)
+        except Exception as e:
+            return f"![Encoding Error] : {e}"
+    except ImportError:
+        return "Please install moudle Flask. e.g. python3 -m pip install flask"
+
+
+def flask_session_decode(session_data: str, secret_key: str):
+    """decode flask session
+
+    Args:
+        session_data: The session you want to decode
+        secret_key: secret_key
+
+    Returns:
+        dict: session data information
+
+    """
+    try:
+        from flask.sessions import SecureCookieSessionInterface
+        try:
+            app = App(secret_key)
+            scsi = SecureCookieSessionInterface()
+            s = scsi.get_signing_serializer(app)
+
+            return s.loads(session_data)
+        except Exception as e:
+            return f"![Decoding Error] : {e}"
+    except ImportError:
+        return "Please install moudle Flask. e.g. python3 -m pip install flask"
+
+
 # ? Reverse
 
 def printHex(data: Union[bytes, str], up: bool = True, sep: str = ' '):
@@ -189,7 +255,7 @@
     bs = list(data)
     for i in range(len(bs)):
         print(('%02X' if up else '%02x') % bs[i], end=sep)
-        if (i+1) % 16 == 0:
+        if (i + 1) % 16 == 0:
             print()
 
 
@@ -326,7 +392,8 @@
     Returns:
         bytes: Base32 table in bytes format, use std_b64table().decode() to get a 'str' one
     """
-    return b32encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(5), list(range(32)))))))))
+    return b32encode(bytes(list(
+        map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(5), list(range(32)))))))))
 
 
 def std_b64table() -> bytes:
@@ -335,7 +402,9 @@
     Returns:
         bytes: Base64 table in bytes format, use std_b64table().decode() to get a 'str' one
     """
-    return b64encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(6), list(range(64)))))))))
+    return b64encode(bytes(list(
+        map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(6), list(range(64)))))))))
+
 
 # ? other
 
@@ -350,7 +419,7 @@
         for d in line.split(" ")[1:]:
             h = hex(int(d, 8))[2:].zfill(4)
             a, b = int(h[2:], 16), int(h[:2], 16)
-            text += chr(a)+chr(b)
+            text += chr(a) + chr(b)
             hex_data += "0x%x 0x%x " % (a, b)
             asc_data += "%s %s " % (a, b)
             list_data += [a, b]
Index: .vscode/settings.json
===================================================================
diff --git a/.vscode/settings.json b/.vscode/settings.json
deleted file mode 100644
--- a/.vscode/settings.json	(revision 581f5581d3ac7e96a27c1b5199d014738c20c12a)
+++ /dev/null	(revision 581f5581d3ac7e96a27c1b5199d014738c20c12a)
@@ -1,15 +0,0 @@
-{
-    "python.testing.unittestArgs": [
-        "-v",
-        "-s",
-        ".",
-        "-p",
-        "*_test.py"
-    ],
-    "python.testing.pytestEnabled": true,
-    "python.testing.nosetestsEnabled": false,
-    "python.testing.unittestEnabled": false,
-    "python.testing.pytestArgs": [
-        "."
-    ]
-}
\ No newline at end of file
Index: .vscode/launch.json
===================================================================
diff --git a/.vscode/launch.json b/.vscode/launch.json
deleted file mode 100644
--- a/.vscode/launch.json	(revision 581f5581d3ac7e96a27c1b5199d014738c20c12a)
+++ /dev/null	(revision 581f5581d3ac7e96a27c1b5199d014738c20c12a)
@@ -1,15 +0,0 @@
-{
-	// 使用 IntelliSense 了解相关属性。 
-	// 悬停以查看现有属性的描述。
-	// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
-	"version": "0.2.0",
-	"configurations": [
-		{
-			"name": "Python: 当前文件",
-			"type": "python",
-			"request": "launch",
-			"program": "${file}",
-			"console": "integratedTerminal"
-		}
-	]
-}
\ No newline at end of file
Index: .idea/shelf/_2021_1_24_21_44____.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/_2021_1_24_21_44____.xml b/.idea/shelf/_2021_1_24_21_44____.xml
new file mode 100644
--- /dev/null	(date 1611501589432)
+++ b/.idea/shelf/_2021_1_24_21_44____.xml	(date 1611501589432)
@@ -0,0 +1,4 @@
+<changelist name="在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]" date="1611495875720" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]/shelved.patch" />
+  <option name="DESCRIPTION" value="在进行检出之前于 2021/1/24 21:44 取消提交了变更 [默认的]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]/shelved.patch b/.idea/shelf/在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]/shelved.patch
new file mode 100644
--- /dev/null	(date 1611495871785)
+++ b/.idea/shelf/在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]/shelved.patch	(date 1611495871785)
@@ -0,0 +1,29 @@
+Index: utils/utils.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>from base64 import b64decode, b64encode, urlsafe_b64decode, urlsafe_b64encode\r\nfrom binascii import hexlify, unhexlify\r\nfrom hashlib import md5 as _md5\r\nfrom hashlib import sha1 as _sha1\r\nfrom hashlib import sha256 as _sha256\r\nfrom json import dumps, loads\r\nfrom random import choice, randint\r\nfrom string import ascii_lowercase, digits\r\nfrom urllib.parse import quote_plus, unquote_plus\r\n\r\nimport jwt\r\n\r\nDEFAULT_ALPHABET = list(ascii_lowercase + digits)\r\n\r\n\r\ndef url_encode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return quote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef url_decode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return unquote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_decode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64decode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_encode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64encode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef bin2hex(s: str) -> str:\r\n    try:\r\n        return hexlify(s.encode()).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef hex2bin(s: str) -> str:\r\n    try:\r\n        return unhexlify(s).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha1(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha1(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha256(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha256(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef md5(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _md5(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef random_int(minN: int = 0, maxN: int = 1024) -> int:\r\n    try:\r\n        return randint(minN, maxN)\r\n    except Exception:\r\n        return 0\r\n\r\n\r\ndef random_string(n: int = 32, alphabet: str = DEFAULT_ALPHABET) -> str:\r\n    try:\r\n        return ''.join([choice(alphabet) for _ in range(n)])\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef json_encode(obj) -> object:\r\n    try:\r\n        return dumps(obj)\r\n    except Exception:\r\n        return object()\r\n\r\n\r\ndef json_decode(data) -> str:\r\n    try:\r\n        return loads(data)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef jwt_encode(header: dict, payload: dict, key=None, algorithm=None) -> str:\r\n    if key is None and algorithm is None:\r\n        # dict to json\r\n        hearder_json = dumps(header, sort_keys=True, separators=(',', ':'))\r\n        payload_json = dumps(payload, sort_keys=True, separators=(',', ':'))\r\n        # json to base64\r\n        header_b64 = urlsafe_b64encode(\r\n            hearder_json.encode()).replace(b'=', b'')\r\n        payload_b64 = urlsafe_b64encode(\r\n            payload_json.encode()).replace(b'=', b'')\r\n\r\n        return (header_b64 + b'.' + payload_b64).decode()\r\n    else:\r\n        return jwt.encode(payload=payload, key=key, algorithm=algorithm, headers=header)\r\n\r\n\r\ndef jwt_decode(token: str) -> bytes:\r\n    data = [b''] * 3\r\n    try:\r\n        for i, each in enumerate(token.split('.')):\r\n            padding = 4 - len(each) % 4\r\n            if padding:\r\n                each += ('=' * padding)\r\n            data[i] = urlsafe_b64decode(each.encode())\r\n    except Exception:\r\n        pass\r\n\r\n    return b'-'.join(data)\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/utils/utils.py b/utils/utils.py
+--- a/utils/utils.py	(revision caf810f0a60ccbb6d5442acafa1f9ad0af48a2e9)
++++ b/utils/utils.py	(date 1611328393090)
+@@ -7,7 +7,6 @@
+ from random import choice, randint
+ from string import ascii_lowercase, digits
+ from urllib.parse import quote_plus, unquote_plus
+-
+ import jwt
+ 
+ DEFAULT_ALPHABET = list(ascii_lowercase + digits)
+@@ -83,7 +82,9 @@
+         return 0
+ 
+ 
+-def random_string(n: int = 32, alphabet: str = DEFAULT_ALPHABET) -> str:
++def random_string(n: int = 32, alphabet=None) -> str:
++    if alphabet is None:
++        alphabet = DEFAULT_ALPHABET
+     try:
+         return ''.join([choice(alphabet) for _ in range(n)])
+     except Exception:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1611504490002)
+++ b/.idea/workspace.xml	(date 1611504490002)
@@ -0,0 +1,167 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="082a20fe-da46-4041-8b1a-081564fa5c2b" name="默认的" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/ctfbox.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/_2021_1_24_21_44____.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/_2021_1_24_23_08____.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/在进行检出之前于_2021_1_24_21_44_取消提交了变更_[默认的]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.vscode/launch.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.vscode/settings.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ctfbox/utils/utils.py" beforeDir="false" afterPath="$PROJECT_DIR$/ctfbox/utils/utils.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ComposerSettings">
+    <execution />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="FlaskConsoleOptions" custom-start-script="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))">
+    <envs>
+      <env key="FLASK_APP" value="app" />
+    </envs>
+    <option name="myCustomStartScript" value="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))" />
+    <option name="myEnvs">
+      <map>
+        <entry key="FLASK_APP" value="app" />
+      </map>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="DevF4DE" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitSEFilterConfiguration">
+    <file-type-list>
+      <filtered-out-file-type name="LOCAL_BRANCH" />
+      <filtered-out-file-type name="REMOTE_BRANCH" />
+      <filtered-out-file-type name="TAG" />
+      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
+    </file-type-list>
+  </component>
+  <component name="ProjectId" id="1nQ4jpz0QkebWXO4yUlbzNxRGau" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">
+    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="WebServerToolWindowFactoryState" value="false" />
+    <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable" />
+    <property name="vue.rearranger.settings.migration" value="true" />
+  </component>
+  <component name="RunManager">
+    <configuration name="flask_pin_helper" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="ctfbox" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/ctfbox/test" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/ctfbox/test/flask_pin_helper.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration name="flask_session_helper" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="ctfbox" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/ctfbox/test" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/ctfbox/test/flask_session_helper.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.flask_pin_helper" />
+        <item itemvalue="Python.flask_session_helper" />
+        <item itemvalue="Python.flask_pin_helper" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="默认任务">
+      <changelist id="082a20fe-da46-4041-8b1a-081564fa5c2b" name="默认的" comment="" />
+      <created>1611309120510</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1611309120510</updated>
+      <workItem from="1611309125192" duration="2399000" />
+      <workItem from="1611325294203" duration="78000" />
+      <workItem from="1611328237968" duration="1238000" />
+      <workItem from="1611495835634" duration="3000" />
+      <workItem from="1611501574018" duration="2911000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+    <option name="oldMeFiltersMigrated" value="true" />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/ctfbox$flask_session_helper.coverage" NAME="flask_session_helper 覆盖结果" MODIFIED="1611504060206" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/ctfbox/test" />
+    <SUITE FILE_PATH="coverage/ctfbox$flask_pin_helper.coverage" NAME="flask_pin_helper 覆盖结果" MODIFIED="1611500323879" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/ctfbox/test" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/shelf/_2021_1_24_23_08____.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/_2021_1_24_23_08____.xml b/.idea/shelf/_2021_1_24_23_08____.xml
new file mode 100644
--- /dev/null	(date 1611501589437)
+++ b/.idea/shelf/_2021_1_24_23_08____.xml	(date 1611501589437)
@@ -0,0 +1,4 @@
+<changelist name="在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]" date="1611500888440" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]/shelved.patch" />
+  <option name="DESCRIPTION" value="在进行检出之前于 2021/1/24 23:08 取消提交了变更 [默认的]" />
+</changelist>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1611501589422)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1611501589422)
@@ -0,0 +1,53 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="DuplicatedCode" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <Languages>
+        <language minSize="131" name="Python" />
+      </Languages>
+    </inspection_tool>
+    <inspection_tool class="PyBroadExceptionInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="false" level="WARNING" enabled_by_default="false">
+      <option name="ignoredPackages">
+        <value>
+          <list size="0" />
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8Inspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="W292" />
+          <option value="E305" />
+          <option value="E302" />
+          <option value="E501" />
+          <option value="E722" />
+          <option value="W605" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8NamingInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="ignoredErrors">
+        <list>
+          <option value="N801" />
+          <option value="N802" />
+          <option value="N806" />
+          <option value="N803" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="false" level="WARNING" enabled_by_default="false">
+      <option name="ignoredIdentifiers">
+        <list>
+          <option value="secret" />
+          <option value="waf" />
+        </list>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="SpellCheckingInspection" enabled="true" level="TYPO" enabled_by_default="true">
+      <option name="processCode" value="false" />
+      <option name="processLiterals" value="false" />
+      <option name="processComments" value="false" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/ctfbox.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/ctfbox.iml b/.idea/ctfbox.iml
new file mode 100644
--- /dev/null	(date 1611501589473)
+++ b/.idea/ctfbox.iml	(date 1611501589473)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.9 (EvilClassServer)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="GOOGLE" />
+    <option name="myDocStringFormat" value="Google" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1611501589481)
+++ b/.idea/modules.xml	(date 1611501589481)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/ctfbox.iml" filepath="$PROJECT_DIR$/.idea/ctfbox.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/shelf/在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]/shelved.patch b/.idea/shelf/在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]/shelved.patch
new file mode 100644
--- /dev/null	(date 1611500887893)
+++ b/.idea/shelf/在进行检出之前于_2021_1_24_23_08_取消提交了变更_[默认的]/shelved.patch	(date 1611500887893)
@@ -0,0 +1,262 @@
+Index: README.md
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>## ctfbox \r\n**A box for CTF challenges with some sugar functions, Just enjoy it**\r\n\r\nCurrent version: **1.2.0**\r\n\r\nPlease use python **3.6+**\r\n\r\n## Install\r\nAll you need to do is\r\n```sh\r\npip install ctfbox\r\n```\r\n\r\n## Usage\r\n\r\n### Common\r\n```python\r\nfrom ctfbox import * # Will not import the pwn part, please check the Pwn Usage section below\r\n# enjoy it\r\n```\r\n\r\n### Pwn Usage\r\n```python\r\n# Don't support windows\r\nfrom pwn import * # import pwntools\r\n# set pwntools config...\r\n# context.os = 'linux'\r\n# context.log_level = 'debug'\r\n# context.arch = 'amd64'\r\nfrom ctfbox.pwntools.config import Config # import confit for pwn part of ctfbox\r\n# set necessary config \r\n\"\"\"\r\nAttributes:\r\n- local(bool) : connect to local binary / remote address, default: True\r\n- bin(str)    : the binary path, e.g. './pwn'\r\n- address(str): the remote address, e.g. '127.0.0.1:2333'\r\n- pie(bool)   : whether the memory address is randomized, default: False\r\n\"\"\"\r\nConfig.local = True\r\nConfig.address = \"127.0.0.1:2333\"\r\nConfig.bin = \"./bin\"\r\n# import pwn part\r\nfrom ctfbox.pwn import *\r\n```\r\nnow you can use the below attributes/functions\r\n```\r\nslog // empty dictionary, you can set the leaked address and corresponding name. e.g. slog['libc'] = libc_addr\r\nelf  // pwntools.ELF(binaray)\r\ncn   // a connect to local binary or remote address\r\nre   // lambda of cn.recv(m, t)\r\nrecv // lambda of cn.recv()\r\nru   // lambda of cn.recvuntil(x)\r\nrl   // lambda of cn.recvline()\r\nsd   // lambda of cn.send(x)\r\nsl   // lambda of cn.sendline(x)\r\nia   // lambda of cn.interactive()\r\nsla  // lambda of cn.sendlineafter(a, b)\r\nsa   // lambda of cn.sendafter(a, b)\r\nft   // ft(arg, f=pwnlib.util.cyclic.de_bruijn(), l=None) lambda of flat(*arg, filler=f, length=l)\r\ngdba // gdba(bps) debug, argument bps save the breakpoint address, breakpoint can also be automatically set when pie is turned on, need pmap command\r\nslog_show // print all set slogs, in hexadecimal format\r\n```\r\n\r\n\r\n## Functions\r\n\r\n### utils\r\nSome functions with names similar to PHP, close to intuition\r\n- url_encode(s: str, encoding: str = 'utf-8') -> str\r\n- url_decode(s: str, encoding: str = 'utf-8') -> str\r\n- base64_decode(s: str, encoding='utf-8') -> str\r\n- base64_encode(s: str, encoding='utf-8') -> str\r\n- json_encode(obj) -> object\r\n- json_decode(data) -> str\r\n- jwt_decode(token: str) -> bytes\r\n- jwt_encode(header: dict, payload: dict, key=None, algorithm=None) -> str\r\n- bin2hex(s: str) -> str\r\n- hex2bin(s: str) -> str\r\n- sha1(s: str, encoding='utf-8') -> str\r\n- sha256(s: str, encoding='utf-8') -> str\r\n- md5(s: str, encoding='utf-8') -> str\r\n- random_int(minN: int = 0, maxN: int = 1024) -> int\r\n- random_string(n: int = 32, alphabet: str = \"\") -> str\r\n\r\nSome functions that may be used in web\r\n- get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = \"flask.app\", appName: str = \"Flask\") -> str\r\n\r\nSome functions that may be used in reverse engineering\r\n* print data in hex format: `printHex()`\r\n* pack number into bytes: `p16()`, `p32()`, `p64()`\r\n* unpack number from bytes: `u16()`, `u32()`, `u64()`\r\n\r\nplease refer to source code for functions signatures and usage\r\n\r\n\r\n\r\nSome functions that may be used in misc\r\n\r\n***TODO***\r\n\r\nSome other functions\r\n- od_parse(data: str) -> Dict[str, Union[str, list]]\r\n\r\n\r\n### core\r\nSome functions Write by ourselves\r\n- Threader(number: int, timeout: int = None, retry: int = 2)\r\n   ```\r\n    A simple decorator function that can decorate the function to make it multi-threaded.\r\n   ```\r\n   Here is a example.\r\n   ```Python\r\n   from ctfbox import Threader, random_string, random_int\r\n   from time import sleep\r\n\r\n   @Threader(10)\r\n   def exp(i: int):\r\n       sleep(random_int(1, 5))\r\n       return \"%d : %s\" % (i, random_string())\r\n    \r\n    tasks = [exp(i) for i in range(100)] # 100 tasks\r\n    for task in tasks: \r\n        # task.result return when a task completed\r\n        # task is a concurrent.futures.Future with some sugar attributes\r\n        print('result: %s running: %s done: %s exception: %s' % (task.result, task.running, task.done, task.exception))\r\n   ```\r\n- provide(host: str = \"0.0.0.0\", port: int = 2005, isasync: bool = False, files: List[Tuple[Union[filepath, content], routePath, contentType]] = {})\r\n   ```\r\n   A simple and customizable http server.\r\n   ```\r\n   Here are some examples.\r\n   ```python\r\n   # provide a exist file named index.html\r\n   provide(files=[('index.html',)])\r\n   # Here is a trick if you provide only one file\r\n   provide(files=['index.html'])\r\n   # route /index.html provide content Hello world\\n\r\n   provide(files=[(b\"Hello world\\\\n\", \"/index.html\")])\r\n   # provide some files\r\n   provide(files=[(\"test.txt\", ), (\"index.html\", )])\r\n   ```\r\n- hashAuth(startIndex: int = 0, endIndex: int = 5, answer: str = \"\", maxRange: int = 1000000, threadNum: int = 25, hashType: HashType = HashType.MD5) -> str\r\n   ```\r\n   A function used to blast the first few bits of the hash, often used to crack the ctf verification code\r\n   ```\r\n   Here are some examples.\r\n   ```python\r\n   ### HashType optional value: HashType.MD5, HashType.SHA1, HashType.SHA256, HashType.SHA512\r\n   ### Crack the first five number MD5 type ctf verification codes\r\n   print(hashAuth(answer=\"02fcf\"))\r\n   ### Crack the first five number SHA1 type ctf verification codes\r\n   print(hashAuth(answer=\"d13ce\", hashType=HashType.SHA1))\r\n   #### Crack more quickly!!\r\n   print(hashAuth(answer=\"c907773\", endIndex=7, threadNum=50))\r\n   ### Make the range bigger!!\r\n   print(hashAuth(answer=\"59e711d\", endIndex=7, maxRange=2000000))\r\n   ```\r\n- httpraw(raw: Union[bytes, str], **kwargs -> requests.Response):\r\n   ```\r\n   Send raw request by python-requests\r\n   \r\n   Allow kwargs:\r\n   - proxies(dict) : requests proxies\r\n   - timeout(float): requests timeout\r\n   - verify(bool)  : requests verify\r\n   - real_host(str): use real host instead of Host if set\r\n   - ssl(bool)     : whether https\r\n   ```\r\n\r\n## Techniques\r\n- [pdm](https://github.com/frostming/pdm)\r\n- [version-helper](https://github.com/WAY29/version-helper/)\r\n\r\n## Depends\r\n- requests\r\n- PyJWT\r\n\r\n## Contributors\r\nSyclover\r\n   - [Longlone](https://github.com/way29)\r\n   - [F4ded](https://github.com/F4ded)\r\n   - [lingze](https://github.com/wlingze)\r\n   - [pjx](https://github.com/pjx206)\r\n\r\nOther\r\n   - [Morouu](http://github.com/Morouu)\r\n\r\n## Logs\r\n### 1.2.0\r\n- add dev dependencies: icecream\r\n- add some functions:\r\n    - od_parse\r\n    - get_flask_pin\r\n    - httpraw\r\n    - p16 p32 p64 and uXX functions\r\n    - Base32 and Base64 table getter\r\n### v1.1.1\r\n- move project to new directory\r\n- update Readme.md, added missing functions\r\n### v1.1.0\r\n- add pwn part, please see Pwn Usage\r\n- add some functions that may be used in reverse\r\n- update hashAuth functions\r\n  - error if startIndex is less than endIndex\r\n  - if startIndex is zero and length of hash(endIndex - startIndex) is not equal to length of answer, endIndex will be set to length of answer\r\n- update Readme.md, add usage and contributors, Supplementary dependency: PyJWT\r\n### v1.0.2\r\n- update Readme.md\r\n### V1.0.1\r\n- update Readme.md\r\n### V1.0.0\r\n- first commit
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/README.md b/README.md
+--- a/README.md	(revision 9527382ee5ad6008292abdb50aa6c3ce226b2cde)
++++ b/README.md	(date 1611499881322)
+@@ -85,6 +85,24 @@
+ Some functions that may be used in web
+ - get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = "flask.app", appName: str = "Flask") -> str
+ 
++- flask_session_helper：
++  - flask_session_encode(secret_key: str, payload: dict)
++  - flask_session_decode(session_data: str, secret_key: str)
++  ```python
++    sk = '123'
++    sd = {
++        'user': 'admin',
++        'info': 'test'
++    }
++    ss = 'eyJpbmZvIjoidGVzdCIsInVzZXIiOiJhZG1pbiJ9.YA2GgA.0W8etebQro834hW_trQJg8N4VMk'
++    print(flask_session_encode(sk, sd))
++    print(flask_session_decode(ss, '123'))
++  
++  #Output:
++  eyJpbmZvIjoidGVzdCIsInVzZXIiOiJhZG1pbiJ9.YA2IrQ.ExaLEG5rJ6noOsOfBbZew9qISa8
++  {'info': 'test', 'user': 'admin'}
++  ```
++
+ Some functions that may be used in reverse engineering
+ * print data in hex format: `printHex()`
+ * pack number into bytes: `p16()`, `p32()`, `p64()`
+@@ -92,8 +110,6 @@
+ 
+ please refer to source code for functions signatures and usage
+ 
+-
+-
+ Some functions that may be used in misc
+ 
+ ***TODO***
+Index: pdm.lock
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>[[package]]\r\nname = \"asttokens\"\r\nsections = [\"dev\"]\r\nversion = \"2.0.4\"\r\nsummary = \"Annotate AST trees with source code positions\"\r\n\r\n[package.dependencies]\r\nsix = \"*\"\r\n\r\n[[package]]\r\nname = \"certifi\"\r\nsections = [\"default\"]\r\nversion = \"2020.12.5\"\r\nsummary = \"Python package for providing Mozilla's CA Bundle.\"\r\n\r\n[[package]]\r\nname = \"chardet\"\r\nsections = [\"default\"]\r\nversion = \"4.0.0\"\r\nsummary = \"Universal encoding detector for Python 2 and 3\"\r\n\r\n[[package]]\r\nname = \"colorama\"\r\nsections = [\"dev\"]\r\nversion = \"0.4.4\"\r\nsummary = \"Cross-platform colored terminal text.\"\r\n\r\n[[package]]\r\nname = \"executing\"\r\nsections = [\"dev\"]\r\nversion = \"0.5.4\"\r\nsummary = \"Get the currently executing AST node of a frame, and other information\"\r\n\r\n[[package]]\r\nname = \"icecream\"\r\nsections = [\"dev\"]\r\nversion = \"2.0.0\"\r\nsummary = \"Inspect variables, expressions, and program execution with a single, simple function call.\"\r\n\r\n[package.dependencies]\r\ncolorama = \">=0.3.9\"\r\npygments = \">=2.2.0\"\r\nexecuting = \">=0.3.1\"\r\nasttokens = \">=2.0.1\"\r\n\r\n[[package]]\r\nname = \"idna\"\r\nsections = [\"default\"]\r\nversion = \"2.10\"\r\nsummary = \"Internationalized Domain Names in Applications (IDNA)\"\r\n\r\n[[package]]\r\nname = \"pygments\"\r\nsections = [\"dev\"]\r\nversion = \"2.7.4\"\r\nsummary = \"Pygments is a syntax highlighting package written in Python.\"\r\n\r\n[[package]]\r\nname = \"PyJWT\"\r\nsections = [\"default\"]\r\nversion = \"2.0.1\"\r\nsummary = \"JSON Web Token implementation in Python\"\r\n\r\n[[package]]\r\nname = \"requests\"\r\nsections = [\"default\"]\r\nversion = \"2.25.1\"\r\nsummary = \"Python HTTP for Humans.\"\r\n\r\n[package.dependencies]\r\nchardet = \"<5,>=3.0.2\"\r\nidna = \"<3,>=2.5\"\r\nurllib3 = \"<1.27,>=1.21.1\"\r\ncertifi = \">=2017.4.17\"\r\n\r\n[[package]]\r\nname = \"six\"\r\nsections = [\"dev\"]\r\nversion = \"1.15.0\"\r\nsummary = \"Python 2 and 3 compatibility utilities\"\r\n\r\n[[package]]\r\nname = \"urllib3\"\r\nsections = [\"default\"]\r\nversion = \"1.26.2\"\r\nsummary = \"HTTP library with thread-safe connection pooling, file post, and more.\"\r\n\r\n[metadata]\r\nlock_version = \"2\"\r\ncontent_hash = \"sha256:afb1c2a8a5876e6a705050ec60034700310db7b4de670b14fcd4b88be35e28c9\"\r\n\r\n[metadata.files]\r\n\"asttokens 2.0.4\" = [\r\n    {file = \"asttokens-2.0.4-py2.py3-none-any.whl\", hash = \"sha256:766d3352908730efb20b95ae22db0f1cb1bedb67c6071fcffb5c236ea673f2f7\"},\r\n    {file = \"asttokens-2.0.4.tar.gz\", hash = \"sha256:a42e57e28f2ac1c85ed9b1f84109401427e5c63c04f61d15b8842b027eec5128\"},\r\n]\r\n\"certifi 2020.12.5\" = [\r\n    {file = \"certifi-2020.12.5-py2.py3-none-any.whl\", hash = \"sha256:719a74fb9e33b9bd44cc7f3a8d94bc35e4049deebe19ba7d8e108280cfd59830\"},\r\n    {file = \"certifi-2020.12.5.tar.gz\", hash = \"sha256:1a4995114262bffbc2413b159f2a1a480c969de6e6eb13ee966d470af86af59c\"},\r\n]\r\n\"chardet 4.0.0\" = [\r\n    {file = \"chardet-4.0.0-py2.py3-none-any.whl\", hash = \"sha256:f864054d66fd9118f2e67044ac8981a54775ec5b67aed0441892edb553d21da5\"},\r\n    {file = \"chardet-4.0.0.tar.gz\", hash = \"sha256:0d6f53a15db4120f2b08c94f11e7d93d2c911ee118b6b30a04ec3ee8310179fa\"},\r\n]\r\n\"colorama 0.4.4\" = [\r\n    {file = \"colorama-0.4.4-py2.py3-none-any.whl\", hash = \"sha256:9f47eda37229f68eee03b24b9748937c7dc3868f906e8ba69fbcbdd3bc5dc3e2\"},\r\n    {file = \"colorama-0.4.4.tar.gz\", hash = \"sha256:5941b2b48a20143d2267e95b1c2a7603ce057ee39fd88e7329b0c292aa16869b\"},\r\n]\r\n\"executing 0.5.4\" = [\r\n    {file = \"executing-0.5.4-py3-none-any.whl\", hash = \"sha256:b96545c606c410e2b8500ef6e3f548d8678e1cb7a561dbcf46e16c19eed10c4e\"},\r\n    {file = \"executing-0.5.4.tar.gz\", hash = \"sha256:07b71adef0399e8579fa0165db5e5f8e9dd961fa66572664de95c838879768eb\"},\r\n]\r\n\"icecream 2.0.0\" = [\r\n    {file = \"icecream-2.0.0-py2.py3-none-any.whl\", hash = \"sha256:9000acd16dc9d3c78a95ac9abc54c172e4f47fbd54541ab10d280fae5bfb8efa\"},\r\n    {file = \"icecream-2.0.0.tar.gz\", hash = \"sha256:434e14a50da01f9dc1e5757efec7613db5df048ebdcecd460236db41688f779a\"},\r\n]\r\n\"idna 2.10\" = [\r\n    {file = \"idna-2.10-py2.py3-none-any.whl\", hash = \"sha256:b97d804b1e9b523befed77c48dacec60e6dcb0b5391d57af6a65a312a90648c0\"},\r\n    {file = \"idna-2.10.tar.gz\", hash = \"sha256:b307872f855b18632ce0c21c5e45be78c0ea7ae4c15c828c20788b26921eb3f6\"},\r\n]\r\n\"pygments 2.7.4\" = [\r\n    {file = \"Pygments-2.7.4-py3-none-any.whl\", hash = \"sha256:bc9591213a8f0e0ca1a5e68a479b4887fdc3e75d0774e5c71c31920c427de435\"},\r\n    {file = \"Pygments-2.7.4.tar.gz\", hash = \"sha256:df49d09b498e83c1a73128295860250b0b7edd4c723a32e9bc0d295c7c2ec337\"},\r\n]\r\n\"pyjwt 2.0.1\" = [\r\n    {file = \"PyJWT-2.0.1-py3-none-any.whl\", hash = \"sha256:b70b15f89dc69b993d8a8d32c299032d5355c82f9b5b7e851d1a6d706dffe847\"},\r\n    {file = \"PyJWT-2.0.1.tar.gz\", hash = \"sha256:a5c70a06e1f33d81ef25eecd50d50bd30e34de1ca8b2b9fa3fe0daaabcf69bf7\"},\r\n]\r\n\"requests 2.25.1\" = [\r\n    {file = \"requests-2.25.1-py2.py3-none-any.whl\", hash = \"sha256:c210084e36a42ae6b9219e00e48287def368a26d03a048ddad7bfee44f75871e\"},\r\n    {file = \"requests-2.25.1.tar.gz\", hash = \"sha256:27973dd4a904a4f13b263a19c866c13b92a39ed1c964655f025f3f8d3d75b804\"},\r\n]\r\n\"six 1.15.0\" = [\r\n    {file = \"six-1.15.0-py2.py3-none-any.whl\", hash = \"sha256:8b74bedcbbbaca38ff6d7491d76f2b06b3592611af620f8426e82dddb04a5ced\"},\r\n    {file = \"six-1.15.0.tar.gz\", hash = \"sha256:30639c035cdb23534cd4aa2dd52c3bf48f06e5f4a941509c8bafd8ce11080259\"},\r\n]\r\n\"urllib3 1.26.2\" = [\r\n    {file = \"urllib3-1.26.2-py2.py3-none-any.whl\", hash = \"sha256:d8ff90d979214d7b4f8ce956e80f4028fc6860e4431f731ea4a8c08f23f99473\"},\r\n    {file = \"urllib3-1.26.2.tar.gz\", hash = \"sha256:19188f96923873c92ccb987120ec4acaa12f0461fa9ce5d3d0772bc965a39e08\"},\r\n]\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/pdm.lock b/pdm.lock
+--- a/pdm.lock	(revision 9527382ee5ad6008292abdb50aa6c3ce226b2cde)
++++ b/pdm.lock	(date 1611500796514)
+@@ -67,6 +67,12 @@
+ version = "2.25.1"
+ summary = "Python HTTP for Humans."
+ 
++[[package]]
++name = "flask.session"
++sections = ["defalut"]
++version = "0.3.2"
++summary = "Python Flask session dependence"
++
+ [package.dependencies]
+ chardet = "<5,>=3.0.2"
+ idna = "<3,>=2.5"
+Index: ctfbox/utils/utils.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>import re\r\nfrom base64 import (b32encode, b64decode, b64encode, urlsafe_b64decode,\r\n                    urlsafe_b64encode)\r\nfrom binascii import hexlify, unhexlify\r\nfrom hashlib import md5 as _md5\r\nfrom hashlib import sha1 as _sha1\r\nfrom hashlib import sha256 as _sha256\r\nfrom itertools import chain\r\nfrom json import dumps, loads\r\nfrom random import choice, randint\r\nfrom string import ascii_lowercase, digits\r\nfrom struct import pack, unpack\r\nfrom typing import Dict, Union\r\nfrom urllib.parse import quote_plus, unquote_plus\r\n\r\nimport jwt\r\nimport requests\r\n\r\nDEFAULT_ALPHABET = list(ascii_lowercase + digits)\r\n\r\n\r\ndef url_encode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return quote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef url_decode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return unquote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_decode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64decode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_encode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64encode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef bin2hex(s: str) -> str:\r\n    try:\r\n        return hexlify(s.encode()).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef hex2bin(s: str) -> str:\r\n    try:\r\n        return unhexlify(s).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha1(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha1(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha256(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha256(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef md5(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _md5(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef random_int(minN: int = 0, maxN: int = 1024) -> int:\r\n    try:\r\n        return randint(minN, maxN)\r\n    except Exception:\r\n        return 0\r\n\r\n\r\ndef random_string(n: int = 32, alphabet: str = DEFAULT_ALPHABET) -> str:\r\n    try:\r\n        return ''.join([choice(alphabet) for _ in range(n)])\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef json_encode(obj) -> object:\r\n    try:\r\n        return dumps(obj)\r\n    except Exception:\r\n        return object()\r\n\r\n\r\ndef json_decode(data) -> str:\r\n    try:\r\n        return loads(data)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef jwt_encode(header: dict, payload: dict, key=None, algorithm=None) -> str:\r\n    if key is None and algorithm is None:\r\n        # dict to json\r\n        hearder_json = dumps(header, sort_keys=True, separators=(',', ':'))\r\n        payload_json = dumps(payload, sort_keys=True, separators=(',', ':'))\r\n        # json to base64\r\n        header_b64 = urlsafe_b64encode(\r\n            hearder_json.encode()).replace(b'=', b'')\r\n        payload_b64 = urlsafe_b64encode(\r\n            payload_json.encode()).replace(b'=', b'')\r\n\r\n        return (header_b64 + b'.' + payload_b64).decode()\r\n    else:\r\n        return jwt.encode(payload=payload, key=key, algorithm=algorithm, headers=header)\r\n\r\n\r\ndef jwt_decode(token: str) -> bytes:\r\n    data = [b''] * 3\r\n    try:\r\n        for i, each in enumerate(token.split('.')):\r\n            padding = 4 - len(each) % 4\r\n            if padding:\r\n                each += ('=' * padding)\r\n            data[i] = urlsafe_b64decode(each.encode())\r\n    except Exception:\r\n        pass\r\n\r\n    return b'-'.join(data)\r\n\r\n# ? web\r\n\r\n\r\ndef get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = \"flask.app\", appName: str = \"Flask\") -> str:\r\n    rv, num = None, None\r\n    probably_public_bits = [\r\n        username,\r\n        modName,\r\n        # getattr(app, '__name__', getattr(app.__class__, '__name__'))\r\n        appName,\r\n        # getattr(mod, '__file__', None),\r\n        absRootPath,\r\n    ]\r\n\r\n    private_bits = [\r\n        # str(uuid.getnode()),  /sys/class/net/ens33/address\r\n        str(int(macAddress.strip().replace(\":\", \"\"), 16)),\r\n        machineId,  # get_machine_id(), /etc/machine-id\r\n    ]\r\n\r\n    h = _md5()\r\n    for bit in chain(probably_public_bits, private_bits):\r\n        if not bit:\r\n            continue\r\n        if isinstance(bit, str):\r\n            bit = bit.encode('utf-8')\r\n        h.update(bit)\r\n    h.update(b'cookiesalt')\r\n\r\n    h.update(b'pinsalt')\r\n    num = ('%09d' % int(h.hexdigest(), 16))[:9]\r\n\r\n    for group_size in 5, 4, 3:\r\n        if len(num) % group_size == 0:\r\n            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')\r\n                          for x in range(0, len(num), group_size))\r\n            break\r\n    else:\r\n        rv = num\r\n    return rv\r\n\r\n\r\n# ? Reverse\r\n\r\ndef printHex(data: Union[bytes, str], up: bool = True, sep: str = ' '):\r\n    if isinstance(data, str):\r\n        data = data.encode()\r\n    bs = list(data)\r\n    for i in range(len(bs)):\r\n        print(('%02X' if up else '%02x') % bs[i], end=sep)\r\n        if (i+1) % 16 == 0:\r\n            print()\r\n\r\n\r\ndef _get_pack_fmtstr(sign, endianness, N):\r\n    byte_order = {\r\n        'little': '<',\r\n        'big': '>'\r\n    }\r\n    number_type = {\r\n        'unsigned': {\r\n            16: 'H',\r\n            32: 'I',\r\n            64: 'Q',\r\n        },\r\n        'signed': {\r\n            16: 'h',\r\n            32: 'i',\r\n            64: 'q',\r\n        }\r\n    }\r\n    return byte_order[endianness] + number_type[sign][N]\r\n\r\n\r\ndef _pN(N: int, number: int, sign: str, endianness: str) -> bytes:\r\n    fmt = _get_pack_fmtstr(sign, endianness, N)\r\n    # use 0xff...ff and N to calculate a mask\r\n    return pack(fmt, number & (0xffffffffffffffff >> (64 - N)))\r\n\r\n\r\ndef p16(number: int, sign: str = 'unsigned', endianness: str = 'little') -> bytes:\r\n    \"\"\"Pack a 16-bit number\r\n\r\n    Args:\r\n        number (int): Number to convert\r\n        sign (str, optional): Signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): Endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n\r\n    Returns:\r\n        bytes: The packed bytes\r\n    \"\"\"\r\n    return _pN(16, number, sign, endianness)\r\n\r\n\r\ndef p32(number: int, sign: str = 'unsigned', endianness: str = 'little') -> bytes:\r\n    \"\"\"Pack a 32-bit number\r\n\r\n    Args:\r\n        number (int): Number to convert\r\n        sign (str, optional): Signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): Endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n\r\n    Returns:\r\n        bytes: The packed bytes\r\n    \"\"\"\r\n    return _pN(32, number, sign, endianness)\r\n\r\n\r\ndef p64(number: int, sign: str = 'unsigned', endianness: str = 'little') -> bytes:\r\n    \"\"\"Pack a 64-bit number\r\n\r\n    Args:\r\n        number (int): Number to convert\r\n        sign (str, optional): Signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): Endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n\r\n    Returns:\r\n        bytes: The packed bytes\r\n    \"\"\"\r\n    return _pN(64, number, sign, endianness)\r\n\r\n\r\ndef _uN(N: int, data: bytes, sign: str, endianness: str, ignore_size: bool) -> int:\r\n    fmt = _get_pack_fmtstr(sign, endianness, N)\r\n\r\n    if ignore_size:\r\n        size = N // 8\r\n        data_len = len(data)\r\n        if data_len < size:\r\n            data += b'\\x00' * (size - data_len)\r\n        elif data_len > size:\r\n            data = data[:size]\r\n\r\n    return unpack(fmt, data)[0]\r\n\r\n\r\ndef u16(data: bytes, sign: str = 'unsigned', endianness: str = 'little', ignore_size=True) -> int:\r\n    \"\"\"Unpacks an 16-bit integer\r\n\r\n    Args:\r\n        data (bytes): bytes data to convert\r\n        sign (str, optional): signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n        ignore_size (bool, optional): automatically pad data or truncate it to match the size . Defaults to True.\r\n\r\n    Returns:\r\n        int: The unpacked number\r\n    \"\"\"\r\n    return _uN(16, data, sign, endianness, ignore_size)\r\n\r\n\r\ndef u32(data: bytes, sign: str = 'unsigned', endianness: str = 'little', ignore_size=True) -> int:\r\n    \"\"\"Unpacks an 32-bit integer\r\n\r\n    Args:\r\n        data (bytes): bytes data to convert\r\n        sign (str, optional): signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n        ignore_size (bool, optional): automatically pad data or truncate it to match the size . Defaults to True.\r\n\r\n    Returns:\r\n        int: The unpacked number\r\n    \"\"\"\r\n    return _uN(32, data, sign, endianness, ignore_size)\r\n\r\n\r\ndef u64(data: bytes, sign: str = 'unsigned', endianness: str = 'little', ignore_size=True) -> int:\r\n    \"\"\"Unpacks an 64-bit integer\r\n\r\n    Args:\r\n        data (bytes): bytes data to convert\r\n        sign (str, optional): signedness (\"signed\"/\"unsigned\"). Defaults to 'unsigned'.\r\n        endianness (str, optional): endianness (\"little\"/\"big\"). Defaults to 'little'.\r\n        ignore_size (bool, optional): automatically pad data or truncate it to match the size . Defaults to True.\r\n\r\n    Returns:\r\n        int: The unpacked number\r\n    \"\"\"\r\n    return _uN(64, data, sign, endianness, ignore_size)\r\n\r\n\r\ndef std_b32table() -> bytes:\r\n    \"\"\"Get a standard Base32 table\r\n\r\n    Returns:\r\n        bytes: Base32 table in bytes format, use std_b64table().decode() to get a 'str' one\r\n    \"\"\"\r\n    return b32encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(5), list(range(32)))))))))\r\n\r\n\r\ndef std_b64table() -> bytes:\r\n    \"\"\"Get a standard Base64 table\r\n\r\n    Returns:\r\n        bytes: Base64 table in bytes format, use std_b64table().decode() to get a 'str' one\r\n    \"\"\"\r\n    return b64encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(6), list(range(64)))))))))\r\n\r\n# ? other\r\n\r\n\r\ndef od_parse(data: str) -> Dict[str, Union[str, list]]:\r\n    \"\"\"Parse od command output without argument, return a dict with the following keys: hex, ascii, list, text\r\n    Returns:\r\n        dict: with key hex, ascii, list, text\r\n    \"\"\"\r\n    text, asc_data, hex_data, list_data = \"\", \"\", \"\", []\r\n    for line in data.split(\"\\n\"):\r\n        for d in line.split(\" \")[1:]:\r\n            h = hex(int(d, 8))[2:].zfill(4)\r\n            a, b = int(h[2:], 16), int(h[:2], 16)\r\n            text += chr(a)+chr(b)\r\n            hex_data += \"0x%x 0x%x \" % (a, b)\r\n            asc_data += \"%s %s \" % (a, b)\r\n            list_data += [a, b]\r\n    return {\"hex\": hex_data.strip(), \"ascii\": asc_data.strip(), \"list\": list_data, \"text\": text}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/ctfbox/utils/utils.py b/ctfbox/utils/utils.py
+--- a/ctfbox/utils/utils.py	(revision 9527382ee5ad6008292abdb50aa6c3ce226b2cde)
++++ b/ctfbox/utils/utils.py	(date 1611499452273)
+@@ -12,6 +12,7 @@
+ from struct import pack, unpack
+ from typing import Dict, Union
+ from urllib.parse import quote_plus, unquote_plus
++from flask.sessions import SecureCookieSessionInterface
+ 
+ import jwt
+ import requests
+@@ -139,10 +140,12 @@
+ 
+     return b'-'.join(data)
+ 
++
+ # ? web
+ 
+ 
+-def get_flask_pin(username: str,  absRootPath: str, macAddress: str, machineId: str, modName: str = "flask.app", appName: str = "Flask") -> str:
++def get_flask_pin(username: str, absRootPath: str, macAddress: str, machineId: str, modName: str = "flask.app",
++                  appName: str = "Flask") -> str:
+     rv, num = None, None
+     probably_public_bits = [
+         username,
+@@ -180,6 +183,33 @@
+         rv = num
+     return rv
+ 
++# flask_seesion_helper
++class App:
++    def __init__(self, secret_key: str):
++        self.secret_key = secret_key
++
++
++def flask_session_encode(secret_key: str, payload: dict):
++    try:
++        app = App(secret_key=secret_key)
++        scsi = SecureCookieSessionInterface()
++        s = scsi.get_signing_serializer(app=app)
++
++        return s.dumps(payload)
++    except Exception as e:
++        return "!Encoding error! {} ".format(e)
++
++
++def flask_session_decode(session_data: str, secret_key: str):
++    app = App(secret_key=secret_key)
++    try:
++        scsi = SecureCookieSessionInterface()
++        s = scsi.get_signing_serializer(app=app)
++
++        return s.loads(session_data)
++    except Exception as e:
++        return "!Decoding error! {}".format(e)
++
+ 
+ # ? Reverse
+ 
+@@ -189,7 +219,7 @@
+     bs = list(data)
+     for i in range(len(bs)):
+         print(('%02X' if up else '%02x') % bs[i], end=sep)
+-        if (i+1) % 16 == 0:
++        if (i + 1) % 16 == 0:
+             print()
+ 
+ 
+@@ -326,7 +356,8 @@
+     Returns:
+         bytes: Base32 table in bytes format, use std_b64table().decode() to get a 'str' one
+     """
+-    return b32encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(5), list(range(32)))))))))
++    return b32encode(bytes(list(
++        map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(5), list(range(32)))))))))
+ 
+ 
+ def std_b64table() -> bytes:
+@@ -335,7 +366,9 @@
+     Returns:
+         bytes: Base64 table in bytes format, use std_b64table().decode() to get a 'str' one
+     """
+-    return b64encode(bytes(list(map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(6), list(range(64)))))))))
++    return b64encode(bytes(list(
++        map(lambda x: int(x, 2), re.findall('.{8}', ''.join(map(lambda x: bin(x)[2:].zfill(6), list(range(64)))))))))
++
+ 
+ # ? other
+ 
+@@ -350,7 +383,7 @@
+         for d in line.split(" ")[1:]:
+             h = hex(int(d, 8))[2:].zfill(4)
+             a, b = int(h[2:], 16), int(h[:2], 16)
+-            text += chr(a)+chr(b)
++            text += chr(a) + chr(b)
+             hex_data += "0x%x 0x%x " % (a, b)
+             asc_data += "%s %s " % (a, b)
+             list_data += [a, b]
+Index: ctfbox/utils/utils_test.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>import unittest\r\nimport sys\r\nfrom utils import *\r\n\r\n\r\nclass TestUtils(unittest.TestCase):\r\n\r\n    def test_url_encode(self):\r\n        self.assertEqual(url_encode(\"你好\"), r\"%E4%BD%A0%E5%A5%BD\")\r\n        self.assertEqual(url_encode(\" +/\"), r\"+%2B%2F\")\r\n\r\n    def test_url_decode(self):\r\n        self.assertEqual(url_decode(r\"%E4%BD%A0%E5%A5%BD\"), \"你好\")\r\n        self.assertEqual(url_decode(r\"+%2B%2F\"), \" +/\")\r\n\r\n    def test_base64_decode(self):\r\n        self.assertEqual(base64_decode(\"ZXhhbXBsZQ==\"), \"example\")\r\n\r\n    def test_base64_encode(self):\r\n        self.assertEqual(base64_encode(\"example\"), \"ZXhhbXBsZQ==\")\r\n\r\n    def test_bin2hex(self):\r\n        self.assertEqual(bin2hex(\"example\"), \"6578616d706c65\")\r\n\r\n    def test_hex2bin(self):\r\n        self.assertEqual(hex2bin(\"6578616d706c65\"), \"example\")\r\n\r\n    def test_sha1(self):\r\n        self.assertEqual(\r\n            sha1(\"example\"), \"c3499c2729730a7f807efb8676a92dcb6f8a3f8f\")\r\n\r\n    def test_sha256(self):\r\n        self.assertEqual(sha256(\"example\"),\r\n                         \"50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c\")\r\n\r\n    def test_md5(self):\r\n        self.assertEqual(md5(\"example\"), \"1a79a4d60de6718e8e5b326e338ae533\")\r\n\r\n    def test_random_int(self):\r\n        v = random_int(0, 10)\r\n        self.assertTrue(0 <= v <= 10)\r\n        v = random_int(2, 1)\r\n        self.assertEqual(v, 0)\r\n\r\n    def test_random_string(self):\r\n        v = random_string()\r\n        self.assertTrue(len(v), 32)\r\n\r\n        v = random_string(16)\r\n        self.assertTrue(len(v), 16)\r\n\r\n        v = random_string(32, \"1234567890\")\r\n        for s in v:\r\n            self.assertIn(s, \"1234567890\")\r\n\r\n        v = random_string(32, \"a\")\r\n        self.assertTrue(v, \"a\" * 32)\r\n\r\n    def test_jwt_decode(self):\r\n        token_test = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ'\r\n        self.assertTrue(\r\n            b'{\"alg\":\"HS256\",\"typ\":\"JWT\"}-{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"iat\":1516239022}', jwt_decode(token_test))\r\n\r\n        token_test = 'eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJ0ZXN0IjoiZXhhbXBsZSJ9'\r\n        self.assertTrue(\r\n            b'{\"alg\":\"None\",\"typ\":\"JWT\"}-{\"test\":\"example\"}', jwt_decode(token_test))\r\n\r\n    def test_jwt_encode(self):\r\n        header_example = {\r\n            'alg': 'None',\r\n            'typ': 'JWT'\r\n        }\r\n        payload_example = {\r\n            'test': 'example'\r\n        }\r\n        self.assertTrue('eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJ0ZXN0IjoiZXhhbXBsZSJ9', jwt_encode(\r\n            header_example, payload_example))\r\n\r\n        header_example = {\r\n            'alg': 'HS256',\r\n            'typ': 'JWT'\r\n        }\r\n        payload_example = {\r\n            'test': 'example'\r\n        }\r\n        result = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0ZXN0IjoiZXhhbXBsZSJ9.FtMkXnl-4jMLu7qYjx2VeyiGH9R_4urRgHUYGXmq8mE'\r\n        self.assertTrue(result, jwt_encode(\r\n            header_example, payload_example, '123456', 'HS256'))\r\n\r\n    def test__pN(self):\r\n        # when passing number and sign that dosenot match, \r\n        # it shall get error from python builtin module struct\r\n        self.assertEqual(b'\\xcd\\xab', p16(0xabcd))\r\n        self.assertEqual(b'\\xab\\xcd', p16(0xabcd, endianness='big'))\r\n        self.assertEqual(b'\\x15\\xcd[\\x07', p32(123456789))\r\n        self.assertEqual(b'\\x07[\\xcd\\x15', p32(123456789, endianness='big'))\r\n\r\n    def test__uN(self):\r\n        self.assertEqual(0xcdab, u16(b'\\xab\\xcd'))\r\n        self.assertEqual(0xabcd, u16(b'\\xab\\xcd', endianness='big'))\r\n        self.assertEqual(0x00ab, u16(b'\\xab'))\r\n        self.assertEqual(0x61626364, u32(b'dcba'))\r\n    \r\n    def test_od_parse(self):\r\n        self.assertEqual(od_parse(\"\"\"0000000 074523 066143 073157 071145 072173 071545 057564 062157\r\n0000020 070137 071141 062563 005175\r\n0000030\"\"\")[\"text\"], \"Syclover{test_od_parse}\\n\")\r\n\r\n    def test_get_flask_pin(self):\r\n        self.assertEqual(get_flask_pin(\"kingkk\", \"/home/kingkk/.local/lib/python3.5/site-packages/flask/app.py\", \"00:0c:29:e5:45:6a\", \"19949f18ce36422da1402b3e3fe53008\"), \"169-851-075\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/ctfbox/utils/utils_test.py b/ctfbox/utils/utils_test.py
+--- a/ctfbox/utils/utils_test.py	(revision 9527382ee5ad6008292abdb50aa6c3ce226b2cde)
++++ b/ctfbox/utils/utils_test.py	(date 1611500021180)
+@@ -59,7 +59,8 @@
+     def test_jwt_decode(self):
+         token_test = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ'
+         self.assertTrue(
+-            b'{"alg":"HS256","typ":"JWT"}-{"sub":"1234567890","name":"John Doe","iat":1516239022}', jwt_decode(token_test))
++            b'{"alg":"HS256","typ":"JWT"}-{"sub":"1234567890","name":"John Doe","iat":1516239022}',
++            jwt_decode(token_test))
+ 
+         token_test = 'eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJ0ZXN0IjoiZXhhbXBsZSJ9'
+         self.assertTrue(
+@@ -100,14 +101,16 @@
+         self.assertEqual(0xabcd, u16(b'\xab\xcd', endianness='big'))
+         self.assertEqual(0x00ab, u16(b'\xab'))
+         self.assertEqual(0x61626364, u32(b'dcba'))
+-    
++
+     def test_od_parse(self):
+         self.assertEqual(od_parse("""0000000 074523 066143 073157 071145 072173 071545 057564 062157
+ 0000020 070137 071141 062563 005175
+ 0000030""")["text"], "Syclover{test_od_parse}\n")
+ 
+     def test_get_flask_pin(self):
+-        self.assertEqual(get_flask_pin("kingkk", "/home/kingkk/.local/lib/python3.5/site-packages/flask/app.py", "00:0c:29:e5:45:6a", "19949f18ce36422da1402b3e3fe53008"), "169-851-075")
++        self.assertEqual(
++            get_flask_pin("kingkk", "/home/kingkk/.local/lib/python3.5/site-packages/flask/app.py", "00:0c:29:e5:45:6a",
++                          "19949f18ce36422da1402b3e3fe53008"), "169-851-075")
+ 
+ 
+ if __name__ == '__main__':
+Index: ctfbox/test/flask_pin_helper.py
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/ctfbox/test/flask_pin_helper.py b/ctfbox/test/flask_pin_helper.py
+new file mode 100644
+--- /dev/null	(date 1611499693369)
++++ b/ctfbox/test/flask_pin_helper.py	(date 1611499693369)
+@@ -0,0 +1,39 @@
++from flask.sessions import SecureCookieSessionInterface
++
++
++class App:
++    def __init__(self, secret_key: str):
++        self.secret_key = secret_key
++
++
++def flask_session_encode(secret_key: str, payload: dict):
++    try:
++        app = App(secret_key=secret_key)
++        scsi = SecureCookieSessionInterface()
++        s = scsi.get_signing_serializer(app=app)
++
++        return s.dumps(payload)
++    except Exception as e:
++        return "!Encoding error! {} ".format(e)
++
++
++def flask_session_decode(session_data: str, secret_key: str):
++    app = App(secret_key=secret_key)
++    try:
++        scsi = SecureCookieSessionInterface()
++        s = scsi.get_signing_serializer(app=app)
++
++        return s.loads(session_data)
++    except Exception as e:
++        return "!Decoding error! {}".format(e)
++
++
++if __name__ == '__main__':
++    sk = '123'
++    sd = {
++        'user': 'admin',
++        'info': 'test'
++    }
++    ss = 'eyJpbmZvIjoidGVzdCIsInVzZXIiOiJhZG1pbiJ9.YA2GgA.0W8etebQro834hW_trQJg8N4VMk'
++    print(flask_session_encode(sk, sd))
++    print(flask_session_decode(ss, '123'))
+diff --git a/ctfbox/test/__init__.py b/ctfbox/test/__init__.py
+new file mode 100644
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1611501589491)
+++ b/.idea/misc.xml	(date 1611501589491)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (EvilClassServer)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1611501589498)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1611501589498)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1611501589506)
+++ b/.idea/vcs.xml	(date 1611501589506)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
