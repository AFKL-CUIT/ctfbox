Index: utils/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from base64 import b64decode, b64encode, urlsafe_b64decode, urlsafe_b64encode\r\nfrom binascii import hexlify, unhexlify\r\nfrom hashlib import md5 as _md5\r\nfrom hashlib import sha1 as _sha1\r\nfrom hashlib import sha256 as _sha256\r\nfrom json import dumps, loads\r\nfrom random import choice, randint\r\nfrom string import ascii_lowercase, digits\r\nfrom urllib.parse import quote_plus, unquote_plus\r\n\r\nimport jwt\r\n\r\nDEFAULT_ALPHABET = list(ascii_lowercase + digits)\r\n\r\n\r\ndef url_encode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return quote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef url_decode(s: str, encoding: str = 'utf-8') -> str:\r\n    try:\r\n        return unquote_plus(s, encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_decode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64decode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef base64_encode(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return b64encode(s.encode()).decode(encoding=encoding)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef bin2hex(s: str) -> str:\r\n    try:\r\n        return hexlify(s.encode()).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef hex2bin(s: str) -> str:\r\n    try:\r\n        return unhexlify(s).decode()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha1(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha1(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef sha256(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _sha256(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef md5(s: str, encoding='utf-8') -> str:\r\n    try:\r\n        return _md5(s.encode(encoding=encoding)).hexdigest()\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef random_int(minN: int = 0, maxN: int = 1024) -> int:\r\n    try:\r\n        return randint(minN, maxN)\r\n    except Exception:\r\n        return 0\r\n\r\n\r\ndef random_string(n: int = 32, alphabet: str = DEFAULT_ALPHABET) -> str:\r\n    try:\r\n        return ''.join([choice(alphabet) for _ in range(n)])\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef json_encode(obj) -> object:\r\n    try:\r\n        return dumps(obj)\r\n    except Exception:\r\n        return object()\r\n\r\n\r\ndef json_decode(data) -> str:\r\n    try:\r\n        return loads(data)\r\n    except Exception:\r\n        return \"\"\r\n\r\n\r\ndef jwt_encode(header: dict, payload: dict, key=None, algorithm=None) -> str:\r\n    if key is None and algorithm is None:\r\n        # dict to json\r\n        hearder_json = dumps(header, sort_keys=True, separators=(',', ':'))\r\n        payload_json = dumps(payload, sort_keys=True, separators=(',', ':'))\r\n        # json to base64\r\n        header_b64 = urlsafe_b64encode(\r\n            hearder_json.encode()).replace(b'=', b'')\r\n        payload_b64 = urlsafe_b64encode(\r\n            payload_json.encode()).replace(b'=', b'')\r\n\r\n        return (header_b64 + b'.' + payload_b64).decode()\r\n    else:\r\n        return jwt.encode(payload=payload, key=key, algorithm=algorithm, headers=header)\r\n\r\n\r\ndef jwt_decode(token: str) -> bytes:\r\n    data = [b''] * 3\r\n    try:\r\n        for i, each in enumerate(token.split('.')):\r\n            padding = 4 - len(each) % 4\r\n            if padding:\r\n                each += ('=' * padding)\r\n            data[i] = urlsafe_b64decode(each.encode())\r\n    except Exception:\r\n        pass\r\n\r\n    return b'-'.join(data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/utils.py b/utils/utils.py
--- a/utils/utils.py	(revision caf810f0a60ccbb6d5442acafa1f9ad0af48a2e9)
+++ b/utils/utils.py	(date 1611328393090)
@@ -7,7 +7,6 @@
 from random import choice, randint
 from string import ascii_lowercase, digits
 from urllib.parse import quote_plus, unquote_plus
-
 import jwt
 
 DEFAULT_ALPHABET = list(ascii_lowercase + digits)
@@ -83,7 +82,9 @@
         return 0
 
 
-def random_string(n: int = 32, alphabet: str = DEFAULT_ALPHABET) -> str:
+def random_string(n: int = 32, alphabet=None) -> str:
+    if alphabet is None:
+        alphabet = DEFAULT_ALPHABET
     try:
         return ''.join([choice(alphabet) for _ in range(n)])
     except Exception:
